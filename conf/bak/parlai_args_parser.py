#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@file: 
@version: 
@desc:  
@time: 2021/4/16 14:07 

@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2021/4/16 14:07   wangfc      1.0         None

"""
from .polyencoder_config_parser import *

BIENCODER_KWARGS = {'datapath': DATAPATH,
                    'init_model': INIT_MODEL,
                    'task': TASK,
                    'model': MODEL,
                    'pretrained_path': PRETRAINED_PATH,
                    'out_dim': OUT_DIM,
                    'model_file': MODEL_FILE,

                    'gpu': GPU,
                    'data_parallel': DATA_PARALLEL,
                    'fp16': FP16,
                    'batchsize': BATCHSIZE,
                    'eval_batchsize': EVAL_BATCHSIZE,
                    'warmup_updates': WARMUP_UPDATES,
                    'lr_scheduler_patience': LR_SCHEDULER_PATIENCE,
                    'lr_scheduler_decay': LR_SCHEDULER_DECAY,
                    'lr': LR,
                    'clip': CLIP,
                    'history_size': HISTORY_SIZE,
                    'label_truncate': LABEL_TRUNCATE,
                    'text_truncate': TEXT_TRUNCATE,
                    'num_epochs': NUM_EPOCHS,
                    'max_train_time': MAX_TRAIN_TIME,
                    'veps': VEPS,
                    'vme': VME,

                    'validation_every_n_secs': VALIDATION_EVERY_N_SECS,
                    'validation_metric': VALIDATION_METRIC,
                    'validation_metric_mode': VALIDATION_METRIC_MODE,
                    'save_after_valid': SAVE_AFTER_VALID,
                    'log_every_n_secs': LOG_EVERY_N_SECS,
                    'candidates': CANDIDATES,
                    'eval_candidates': EVAL_CANDIDATES,
                    'fixed_candidates_path': FIXED_CANDIDATES_PATH,

                    'dict_language': DICT_LANGUAGE,
                    'dict_class': DICT_CLASS,
                    'dict_lower': DICT_LOWER,
                    'dict_tokenizer': DICT_TOKENIZER,
                    # 'dict_endtoken': DICT_ENDTOKEN,

                    'optimizer': OPTIMIZER,
                    'codes_attention_type': CODES_ATTENTION_TYPE,
                    'codes_attention_num_heads': CODES_ATTENTION_NUM_HEADS,
                    'dropout': DROPOUT,

                    # 'output_scaling': OUT
                    # PUT_SCALING,
                    # 'variant': VARIANT,
                    # 'reduction_type': REDUCTION_TYPE,
                    # 'share_encoders': SHARE_ENCODERS,
                    # 'learn_positional_embeddings': LEARN_POSITIONAL_EMBEDDINGS,
                    # 'n_layers': N_LAYERS,
                    # 'n_heads': N_HEADS,
                    # 'ffn_size': FFN_SIZE,
                    # 'attention_dropout': ATTENTION_DROPOUT,
                    # 'relu_dropout': RELU_DROPOUT,
                    # 'dropout': DROPOUT,
                    # 'n_positions': N_POSITIONS,
                    # 'embedding_size': EMBEDDING_SIZE,
                    # 'activation': ACTIVATION,
                    # 'embeddings_scale': EMBEDDINGS_SCALE,
                    # 'n_segments': N_SEGMENTS,
                    # 'learn_embeddings': LEARN_EMBEDDINGS,
                    }

POLYENCODER_KWARGS = {'datapath': DATAPATH,
                      'init_model': INIT_MODEL,
                      'task': TASK,
                      'model': MODEL,
                      'batchsize': BATCHSIZE,
                      'eval_batchsize': EVAL_BATCHSIZE,
                      'warmup_updates': WARMUP_UPDATES,
                      'lr_scheduler_patience': LR_SCHEDULER_PATIENCE,
                      'lr_scheduler_decay': LR_SCHEDULER_DECAY,
                      'lr': LR,
                      'data_parallel': DATA_PARALLEL,
                      'history_size': HISTORY_SIZE,
                      'label_truncate': LABEL_TRUNCATE,
                      'text_truncate': TEXT_TRUNCATE,
                      'num_epochs': NUM_EPOCHS,
                      'max_train_time': MAX_TRAIN_TIME,
                      'veps': VEPS,
                      'vme': VME,
                      'validation_metric': VALIDATION_METRIC,
                      'validation_metric_mode': VALIDATION_METRIC_MODE,
                      'save_after_valid': SAVE_AFTER_VALID,
                      'log_every_n_secs': LOG_EVERY_N_SECS,
                      'candidates': CANDIDATES,
                      'fp16': FP16,
                      'dict_tokenizer': DICT_TOKENIZER,
                      'dict_lower': DICT_LOWER,
                      'dict_language': DICT_LANGUAGE,
                      'optimizer': OPTIMIZER,
                      'output_scaling': OUTPUT_SCALING,
                      'variant': VARIANT,
                      'reduction_type': REDUCTION_TYPE,
                      'share_encoders': SHARE_ENCODERS,
                      'learn_positional_embeddings': LEARN_POSITIONAL_EMBEDDINGS,
                      'n_layers': N_LAYERS,
                      'n_heads': N_HEADS,
                      'ffn_size': FFN_SIZE,
                      'attention_dropout': ATTENTION_DROPOUT,
                      'relu_dropout': RELU_DROPOUT,
                      'dropout': DROPOUT,
                      'n_positions': N_POSITIONS,
                      'embedding_size': EMBEDDING_SIZE,
                      'activation': ACTIVATION,
                      'embeddings_scale': EMBEDDINGS_SCALE,
                      'n_segments': N_SEGMENTS,
                      'learn_embeddings': LEARN_EMBEDDINGS,
                      'polyencoder_type': POLYENCODER_TYPE,
                      'poly_n_codes': POLY_N_CODES,
                      'poly_attention_type': POLY_ATTENTION_TYPE,
                      # 'dict_endtoken': DICT_ENDTOKEN,
                      'model_file': MODEL_FILE}

# POLYENCODER_KWARGS = {'init_model': 'zoo:pretrained_transformers/poly_model_huge_reddit/model',
#                       'task': 'dstc7',
#                       'model': 'transformer/polyencoder',
#                       'batchsize': 64,
#                       'eval_batchsize': 10,
#                       'warmup_updates': 100,
#                       'lr_scheduler_patience': 0,
#                       'lr_scheduler_decay': 0.4,
#                       'lr': 5e-05,
#                       'data_parallel': True,
#                       'history_size': 20,
#                       'label_truncate': 72,
#                       'text_truncate': 360,
#                       'num_epochs': 8.0,
#                       'max_train_time': 200000,
#                       'veps': 0.5,
#                       'vme': 8000,
#                       'validation_metric': 'accuracy',
#                       'validation_metric_mode': 'max',
#                       'save_after_valid': True,
#                       'log_every_n_secs': 20,
#                       'candidates': 'batch',
#                       'fp16': True,
#                       'dict_tokenizer': 'bpe',
#                       'dict_lower': True,
#                       'optimizer': 'adamax',
#                       'output_scaling': 0.06,
#                       'variant': 'xlm',
#                       'reduction_type': 'mean',
#                       'share_encoders': False,
#                       'learn_positional_embeddings': True,
#                       'n_layers': 12,
#                       'n_heads': 12,
#                       'ffn_size': 3072,
#                       'attention_dropout': 0.1,
#                       'relu_dropout': 0.0,
#                       'dropout': 0.1,
#                       'n_positions': 1024,
#                       'embedding_size': 768,
#                       'activation': 'gelu',
#                       'embeddings_scale': False,
#                       'n_segments': 2,
#                       'learn_embeddings': True,
#                       'polyencoder_type': 'codes',
#                       'poly_n_codes': 64,
#                       'poly_attention_type': 'basic',
#                       'dict_endtoken': '__start__',
#                       'model_file': '/home/wangfc/faq/output/dstc7_output/polyencoder_dstc7'}
